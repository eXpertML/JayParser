<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:e="http://schema.expertml.com/JayParser" stylesheet="../../../main/resources/xsl/JayParser.xsl">
  
  <x:param name="debug" select="false()"/>
  
<!--   Eat your own Dogfood -->
  <!--<x:scenario label="when parsing the iXML (compact) grammar">
    <x:call function="e:parse-with-grammar">
      <x:param name="local.input"><![CDATA[
ixml: S, rule+.
         -S: (whitespace; comment)*.
-whitespace: -[Zs]; tab; lf; cr.
       -tab: -#9.
        -lf: -#a.
        -cr: -#d.
    comment: -"{", (cchar; comment)*, -"}".
     -cchar: ~["{}"].
rule: (mark, S)?, name, S, ["=:"], S, -alts, ".", S.
@mark: ["@^-"].
alts: alt+([";|"], S).
alt: term*(",", S).
-term: factor;
       option;
       repeat0;
       repeat1.
-factor: terminal;
         nonterminal;
         "(", S, alts, ")", S.
repeat0: factor, "*", S, sep?.
repeat1: factor, "+", S, sep?.
option: factor, "?", S.
sep: factor.
nonterminal: (mark, S)?, name, S.

-terminal: literal; 
           charset.
  literal: quoted;
           encoded.
  -quoted: (tmark, S)?, -string.

        @name: namestart, namefollower*.
   -namestart: ["_"; Ll; Lu; Lm; Lt; Lo].
-namefollower: namestart; ["-.·‿⁀"; Nd; Mn].

  @tmark: ["^-"].
  string: -'"', dstring, -'"', S;
          -"'", sstring, -"'", S.
@dstring: dchar+.
@sstring: schar+.
   dchar: ~['"'];
          '"', -'"'. {all characters, quotes must be doubled}
   schar: ~["'"];
          "'", -"'". {all characters, quotes must be doubled}
-encoded: (tmark, S)?, -"#", @hex, S.
     hex: ["0"-"9"; "a"-"f"; "A"-"F"]+.

 -charset: inclusion; 
           exclusion.
inclusion: (tmark, S)?,         set.
exclusion: (tmark, S)?, "~", S, set.
     -set: "[", S,  member+([";|"], S), "]", S.
  -member: literal;
           range;
           class.
range: from, "-", S, to.
@from: character.
  @to: character.
-character: -'"', dchar, -'"', S;
            -"'", schar, -"'", S;
            "#", hex, S.
class: letter, letter, S.
letter: ["a"-"z"; "A"-"Z"].]]>
      </x:param>
      <x:param name="local.grammar" href="../../../../samples/ixml.ixml"/>
    </x:call>
    <x:expect label="Expect to return the iXML (xml) grammar" href="../../../../samples/ixml.ixml"/>
  </x:scenario>-->
  
  
  <!-- Invisible XML Spec Requirements: Marks -->
  <x:scenario label="when processing a rule with a '@'">
    <x:call function="e:parse-with-grammar">
      <x:param name="local.input" select="'£12.50'"/>
      <x:param name="local.grammar" select="/">
        <ixml>
          <rule name="price">
            <alt>
              <option>
                <alts>
                  <alt>
                    <nonterminal name="currency"/>
                  </alt>
                </alts>
              </option>
              <nonterminal name="number"/>
              <option>
                <alts>
                  <alt>
                    <literal dstring="."/>
                    <nonterminal name="number"/>
                  </alt>
                </alts>
              </option>
            </alt>
          </rule>
          <rule name="number">: <alt>
              <repeat1>
                <nonterminal name="digit"/>+ </repeat1>, <nonterminal name="S"/>
            </alt>. </rule>
          <rule mark="-" name="digit">: <alt>
              <inclusion>[ <range from="0" to="9">-</range>] </inclusion>
            </alt>. </rule>
          <rule mark="@" name="currency">
            <alts>
              <alt>
                <literal dstring="£"/>
              </alt>
              <alt>
                <literal dstring="$"/>
              </alt>
            </alts>
          </rule>
        </ixml>
      </x:param>
    </x:call>
    <x:expect label="expected output" select="/">
      <price currency="£">12.50</price>
    </x:expect>
    <x:expect label="Output the currency as an attribue" select="/price/@currency">£</x:expect>
  </x:scenario>
  <x:scenario label="when processing a rule with a '^'" pending="to be implemented"></x:scenario>
  <x:scenario label="when processing a rule with a '-'">
    <x:call function="e:parse-with-grammar">
      <x:param name="local.input" select="'12345'"/>
      <x:param name="local.grammar" select="/">
        <ixml>
          <rule name="number">:
            <alt>
              <repeat1>
                <nonterminal name="digit"/>+ </repeat1>, <nonterminal name="S"/>
            </alt>.
          </rule>
          <rule mark="-" name="digit">: 
            <alt>
              <inclusion>[ <range from="0" to="9">-</range>] </inclusion>
            </alt>. 
          </rule>
        </ixml>
      </x:param>
    </x:call>
    <x:expect label="Do not output the marked elements" select="/">
      <number>12345</number>
    </x:expect>
  </x:scenario>
  <x:scenario label="when processing rules without a mark">
    <x:call function="e:parse-with-grammar">
      <x:param name="local.input" select="'12345'"/>
      <x:param name="local.grammar" select="/">
        <ixml>
          <rule name="number">:
            <alt>
              <repeat1>
                <nonterminal name="digit"/>+ </repeat1>, <nonterminal name="S"/>
            </alt>.
          </rule>
          <rule name="digit">: 
            <alt>
              <inclusion>[ <range from="0" to="9">-</range>] </inclusion>
            </alt>. 
          </rule>
        </ixml>
      </x:param>
    </x:call>
    <x:expect label="Create elements for each rule match" select="/">
      <number>
        <digit>1</digit>
        <digit>2</digit>
        <digit>3</digit>
        <digit>4</digit>
        <digit>5</digit>
      </number>
    </x:expect>
  </x:scenario>
  
  <!-- Function testing 
  
  <x:scenario label="Scenario for testing function getStates" pending="not yet implemented">
    <x:scenario label="With no existing states">
      <x:scenario label="And with no new states in descendant nodes">
        <x:call function="e:getStates">
          <x:param name="states" select="''"/>
          <x:param name="nodes" select="''"/>
        </x:call>
        <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
      </x:scenario>
      <x:scenario label="And with new states in descendant nodes">
        <x:call function="e:getStates">
          <x:param name="states" select="''"/>
          <x:param name="nodes" select="''"/>
        </x:call>
        <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
      </x:scenario>
    </x:scenario>
    <x:scenario label="With existing states">
      <x:scenario label="And with no new states in descendant nodes">
        <x:call function="e:getStates">
          <x:param name="states" select="''"/>
          <x:param name="nodes" select="''"/>
        </x:call>
        <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
      </x:scenario>
      <x:scenario label="And with new states in descendant nodes">
        <x:call function="e:getStates">
          <x:param name="states" select="''"/>
          <x:param name="nodes" select="''"/>
        </x:call>
        <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
      </x:scenario>
    </x:scenario>
  </x:scenario>

  <x:scenario label="Scenario for testing function getVisited" pending="not yet implemented">
    <x:call function="e:getVisited">
      <x:param name="visited" select="''"/>
      <x:param name="nodes" select="''"/>
    </x:call>
    <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
  </x:scenario>

  <x:scenario label="Scenario for testing function unvisited" pending="not yet implemented">
    <x:call function="e:unvisited">
      <x:param name="visited" select="''"/>
      <x:param name="key" select="''"/>
      <x:param name="state" select="''"/>
    </x:call>
    <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
  </x:scenario>

  <x:scenario label="Scenario for testing function rmerge" pending="not yet implemented">
    <x:call function="e:rmerge">
      <x:param name="maps" select="''"/>
    </x:call>
    <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
  </x:scenario>

  <x:scenario label="Scenario for testing function visit" pending="not yet implemented">
    <x:call function="e:visit">
      <x:param name="visited" select="''"/>
      <x:param name="key" select="''"/>
      <x:param name="state" select="''"/>
      <x:param name="endStates" select="''"/>
    </x:call>
    <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
  </x:scenario>

  <x:scenario label="Scenario for testing function visit" pending="not yet implemented">
    <x:call function="e:visit">
      <x:param name="visited" select="''"/>
      <x:param name="key" select="''"/>
      <x:param name="state" select="''"/>
    </x:call>
    <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
  </x:scenario>

  <x:scenario label="Scenario for testing function parse" pending="not yet implemented">
    <x:call function="e:parse">
      <x:param name="local.input" select="''"/>
    </x:call>
    <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
  </x:scenario>

  <x:scenario label="Scenario for testing function parse-with-grammar" pending="not yet implemented">
    <x:call function="e:parse-with-grammar">
      <x:param name="local.input" select="''"/>
      <x:param name="local.grammar" select="''"/>
    </x:call>
    <x:expect label="Not yet implemented" select="'Not yet implemented'"/>
  </x:scenario>-->
  
</x:description>
